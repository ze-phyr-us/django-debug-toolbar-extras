
import types

from django.conf import settings
from django.utils.importlib import import_module
from django.utils.translation import ugettext_lazy as _

#import debug_toolbar.urls
from debug_toolbar.panels import DebugPanel

import inspect
def get_var_from_stack(varname=None, n=1):
    """
    If varname is specified, return the object corresponding to that name
    from n frames up from the frame this function was called in, where the
    current frame is n == 0.  If varname is None, then return all the locals
    from the specified frame.
    """
    fr_locals = inspect.stack()[n+1][0].f_locals
    if varname is None:
        return fr_locals
    return fr_locals[varname]

class URLconfDebugPanel(DebugPanel):
    """
    A panel that lists all url mappings for this request.
    """
    name = 'URLconf'
    template = 'debug_toolbar/panels/urlconf.html'
    has_content = True

    def nav_title(self):
        return _('URL Mappings')

    def title(self):
        return _('URL Mappings')

    def url(self):
        return ''

    def process_request(self, request):
        self.request = request
        # HACK: This relies on an implementation detail of out caller:
        #    debug_toolbar.middleware.DebugToolbarMiddleware.process_request
        # Because debug_toolbar always generates a urlconf for the request
        # we must try to get the real one.
        #self.urlconf = get_var_from_stack('urlconf')

    def __hack_get_urlconf(self):
        # This is a urlconf generated by the debug_toolbar middleware
        urlconf_fake = getattr(self.request, 'urlconf', settings.ROOT_URLCONF)
        debug_toolbar_middleware = get_var_from_stack('self', 2)
        urlconf = None

        # Try to find the original urlconf in the middleware's urlconf mapping
        # HACK: This relies on an implementation detail of out caller:
        #    debug_toolbar.middleware.DebugToolbarMiddleware.process_response
        for k, v in debug_toolbar_middleware._urlconfs.items():
            if v == urlconf_fake:
                urlconf = k
        return urlconf

    def process_response(self, request, response):
        debug = {}

        urlconf = import_module(settings.ROOT_URLCONF)
        #urlconf = self.urlconf
        #~ urlconf = self.__hack_get_urlconf()
        #~ debug['urlconf'] = urlconf
        #~ debug['urlpatterns'] = urlconf.urlpatterns
        #~ debug['dbg_middleware'] = get_var_from_stack('self')
        #~ debug['fr_locals'] = get_var_from_stack()

        if isinstance(urlconf, types.ModuleType):
            urlconf_mod = urlconf
            urlconf = urlconf.__name__
        else:
            urlconf_mod = import_module(urlconf)

        self.record_stats({
            'urlconf': urlconf,
            'urlpatterns': urlconf_mod.urlpatterns,
            'debug': debug,
        })
